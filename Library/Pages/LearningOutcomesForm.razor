@using System.Text
@using LearningOutcomesGenerator.Pages
@inject ClipBoardService ClipBoardService
@inject ISnackbar Snackbar


<div class="flex flex-col w-[98%] 2xl:w-4/6 mx-auto my-3 min-h-[98%] max-h-[98%] h-[98%] relative border-3 border-adlerdarkblue rounded overflow-hidden bg-gradient-to-br from-adlerbggradientto to-adlergrey-100">
    <div class="flex flex-col my-2 mx-4">
        <div class="flex flex-row justify-between">
        <a href="https://projekt-adler.eu/" target="_blank" title="Website zum Projekt AdLer">
                    <img class="flex-none w-10" src="_content/Library/CustomIcons/AdLer_Logo.png" alt="Projekt AdLer-Logo" />
                </a>
        <a class="flex justify-end text-xs text-adlerblue" target="_blank" href="_content/Library/CustomIcons/Beispiel_Learning_Outcome.png">Beispiel für eine Lernziel/Lernergebnis-Formulierung</a>
        </div>
        <MudText Class="cursor-default flex justify-center items-center text-lg 2xl:text-xl font-bold text-adlerdarkblue pb-1.5">AdLer-Eingabeunterstützung</MudText>
        <div class="flex flex-col gap-4">
            <MudExpansionPanels Elevation="2">
            <MudExpansionPanel Class="bg-gradient-to-br from-adlerbggradientto to-adlergrey-100" Text="Was sind Lernziele/Lernergebnisse?">
                <MudText Class="cursor-default text-sm text-adlergrey-800">Im Zusammenhang mit der kompetenzorientierten Hochschullehre und dem damit verbundenen Perspektivwechsel „Shift from Teaching to Learning“, wurden auch Lernziele in den Fokus gerückt. Lernziele beschreiben, was Studierende am Ende eines Lernabschnitts wissen und können sollen sowie welche Einstellungen von ihnen erwartet werden. Lernziele sind damit die möglichst exakte Beschreibung der angestrebten Lernergebnisse (engl. Learning Outcomes). Sie werden in schriftlicher Form festgehalten und situationsgerecht kommuniziert. Hilfestellungen dafür sind die Was-Womit-Wozu-Struktur und Lernzieltaxonomien (z.B. nach Anderson/Krathwohl), welche auf Basis von verschiedenen Kompetenzstufen passende Verben für die Formulierung von Lernzielen/Lernergebnissen vorschlagen.</MudText>
            </MudExpansionPanel>
            </MudExpansionPanels>
            <MudText Class="cursor-default text-sm text-adlergrey-800">Machen Sie sich zunächst Gedanken dazu, auf welcher Taxonomiestufe Sie Ihr Lernziel/Lernergebnis formulieren möchten.</MudText>
        </div>
    </div>

    <div class="border-adlergrey-300 bg-white border-2 rounded mx-4">
        <div class="flex flex-row gap-4 m-2 pb-8">
            <div class="min-w-32 sm:w-44 2xl:w-48 flex flex-row items-center justify-center gap-2 p-2 bg-adlerblue-100 rounded">
                <MudText Class="cursor-default text-xs 2xl:text-sm text-adlerdarkblue font-bold break-all">Taxonomiestufe</MudText>
                <MudTooltip Placement="Placement.Right" Class="w-96 p-4 bg-adlerdarkblue-200 shadow-xl text-start leading-relaxed" Text="Die Formulierung eines Lernziels/Lernergebnisses fokussiert die Beschreibung von entsprechenden Fähigkeiten, Fertigkeiten oder Kompetenzen des intendierten Lernprozesses der Studierenden. Diese lassen sich aufgrund ihrer Komplexität der kognitiven Prozesse einer Taxonomiestufe zuordnen. Die Festlegung einer Taxonomiestufe (nach Anderson & Krathwohl) dient in den weiteren Bearbeitungsschritten der Lernziel/Lernergebnis-Formulierung zum Finden eines passenden Verbes der Sichtbarkeit.">
                    <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Info" Class="text-adlergrey hover:text-adlerdarkblue"></MudIcon>
                </MudTooltip>
            </div>
            <MudSelect class="w-40 break-all" @bind-Value="_selectedTaxonomyLevel" Placeholder="Auswahl der Taxonomiestufe">
                
                <MudSelectItem Value="@String.Empty">
                    <div class="flex flex-row items-center gap-2">
                        <div class="min-w-[15%] text-md break-keep text-adlergrey">Keine Angabe</div>
                    </div>
                </MudSelectItem>
                
                <MudSelectItem Value="@_taxonomyLevels[0].ToString()">
                    <div class="flex flex-row items-center gap-2">
                        <div class="min-w-[15%] text-md break-keep font-bold text-adlerblue-500">@_taxonomyLevels[0].ToString()</div>
                        <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.ArrowRightAlt" Color="Color.Default"></MudIcon>
                        <span title="Auf relevantes Wissen im Langzeitgedächtnis zugreifen" class="max-w-[65%] text-adlergrey text-xs italic break-word"> Auf relevantes Wissen im Langzeitgedächtnis zugreifen</span>
                    </div>
                </MudSelectItem>
        
                <MudSelectItem Value="@_taxonomyLevels[1].ToString()">
                    <div class="flex flex-row items-center gap-2">
                        <div class="min-w-[15%] text-md break-keep font-bold text-adlerblue-500">@_taxonomyLevels[1].ToString()</div>
                        <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.ArrowRightAlt" Color="Color.Default"></MudIcon>
                        <span title="Informationen (mündlich, schriftlich oder grafisch) in der Lerneinheit Bedeutung zuordnen" class="max-w-[65%] text-adlergrey text-xs italic break-word"> Informationen (mündlich, schriftlich oder grafisch) in der Lerneinheit Bedeutung zuordnen</span>
                    </div>
                </MudSelectItem>
        
                <MudSelectItem Value="@_taxonomyLevels[2].ToString()">
                    <div class="flex flex-row items-center gap-2">
                        <div class="min-w-[15%] text-md break-keep font-bold text-adlerblue-500">@_taxonomyLevels[2].ToString()</div>
                        <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.ArrowRightAlt" Color="Color.Default"></MudIcon>
                        <span title="Einen Handlungsablauf oder eine Methode in einer bestimmten Situation anwenden" class="max-w-[65%] text-adlergrey text-xs italic break-word"> Einen Handlungsablauf oder eine Methode in einer bestimmten Situation anwenden</span>
                    </div>
                </MudSelectItem>
        
                <MudSelectItem Value="@_taxonomyLevels[3].ToString()">
                    <div class="flex flex-row items-center gap-2">
                        <div class="min-w-[15%] text-md break-keep font-bold text-adlerblue-500">@_taxonomyLevels[3].ToString()</div>
                        <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.ArrowRightAlt" Color="Color.Default"></MudIcon>
                        <span title="Lerninhalte in ihre Elemente zerlegen und ihre Verbindung zu einer übergreifenden Struktur oder einem übergreifenden Zweck bestimmen" class="max-w-[65%] text-adlergrey text-xs italic break-word"> Lerninhalte in ihre Elemente zerlegen und ihre Verbindung zu einer übergreifenden Struktur oder einem übergreifenden Zweck bestimmen</span>
                    </div>
                </MudSelectItem>
        
                <MudSelectItem Value="@_taxonomyLevels[4].ToString()">
                    <div class="flex flex-row items-center gap-2">
                        <div class="min-w-[15%] text-md break-keep font-bold text-adlerblue-500">@_taxonomyLevels[4].ToString()</div>
                        <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.ArrowRightAlt" Color="Color.Default"></MudIcon>
                        <span title="Urteile aufgrund von Kriterien oder Standards abgeben" class="max-w-[65%] text-adlergrey text-xs italic break-word"> Urteile aufgrund von Kriterien oder Standards abgeben</span>
                    </div>
                </MudSelectItem>
        
                <MudSelectItem Value="@_taxonomyLevels[5].ToString()">
                    <div class="flex flex-row items-center gap-2">
                        <div class="min-w-[15%] text-md break-keep font-bold text-adlerblue-500">@_taxonomyLevels[5].ToString()</div>
                        <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.ArrowRightAlt" Color="Color.Default"></MudIcon>
                        <span title="Elemente zu einer zusammenhängenden Struktur oder zu einem zusammenhängenden Muster zusammenfügen" class="max-w-[65%] text-adlergrey text-xs italic break-word"> Elemente zu einer zusammenhängenden Struktur oder zu einem zusammenhängenden Muster zusammenfügen</span>
                    </div>
                </MudSelectItem>
            </MudSelect>
        </div>

        <div class="flex flex-row gap-4 m-2">
            <MudText Class="min-w-32 sm:w-44 2xl:w-48 p-2"></MudText>
            <MudText Class="cursor-default text-md text-adlergrey-800">"Die Studierenden können...</MudText>
        </div>

        <div class="flex flex-row gap-4 m-2">
            <div class="min-w-32 sm:w-44 2xl:w-48 flex flex-row items-center justify-center gap-2 p-2 bg-adlergrey-100 rounded">
                <MudText Class="cursor-default text-xs 2xl:text-sm text-adlerdarkblue font-bold break-all">Was? (Inhalt)*</MudText>
                <MudTooltip Placement="Placement.Right" Class="w-96 p-4 bg-adlerdarkblue-200 shadow-xl text-start leading-relaxed" Text="Das „Was“ sagt aus, welcher Lerninhalt (inhaltliches Thema) im Rahmen des Kompetenzerwerbs der Studierenden adressiert werden soll. Dieser wird in den folgenden Schritten mit Hilfe einer Taxonomiestufe und einem Verb der Sichtbarkeit zu einer entsprechenden Fähigkeit, Fertigkeit oder Kompetenz weiterformuliert.">
                    <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Info" Class="text-adlergrey hover:text-adlerdarkblue"></MudIcon>
                </MudTooltip>
            </div>
            <MudTextField @bind-Value="_currentLearningOutcome.What" Placeholder="Textfeld" Lines="2" DebounceInterval="1" Clearable="true" Immediate="true"></MudTextField>
        </div>

        <div class="flex flex-row gap-4 m-2">
            <div class="min-w-32 sm:w-44 2xl:w-48 flex flex-row items-center justify-center gap-2 p-2 bg-adlergrey-100 rounded">
                <MudText Class="cursor-default text-xs 2xl:text-sm text-adlerdarkblue font-bold break-all">Verb der Sichtbarkeit*</MudText>
                <MudTooltip Placement="Placement.Right" Class="w-96 p-4 bg-adlerdarkblue-200 shadow-xl text-start leading-relaxed" Text="Das Lernziel/Lernergebnis beschreibt gewünschte Verhaltensdispositionen und welche Fähigkeiten, Fertigkeiten oder Kompetenzen die Studierenden am Ende des Lernprozesses entwickelt haben werden. Es beschreibt also Handlungen, welche mit Hilfe von Verben der äußeren Sichtbarkeit formuliert werden. Diese stellen ein Tun an oder mit einem äußeren Objekt dar. Verben wie „verstehen“ oder „erkennen“ sind deshalb nicht geeignet. Die Verben der äußeren Sichtbarkeit lassen sich einer Taxonomiestufe zuordnen.">
                    <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Info" Class="text-adlergrey hover:text-adlerdarkblue"></MudIcon>
                </MudTooltip>
            </div>
            <MudAutocomplete T="string" Placeholder="Formulieren oder auswählen" MaxItems="1000"
                             @bind-Value="_currentLearningOutcome.VerbOfVisibility"
                             @bind-Text="_currentText"
                             CoerceText="true" 
                             CoerceValue="true"
                             SearchFunc="@SearchVerbOfVisibility"
                             OnBlur="@OnBlurVerbOfVisibility"
                             DebounceInterval="300"/>
        </div>

        <div class="flex flex-row gap-4 m-2">
            <div class="min-w-32 sm:w-44 2xl:w-48 flex flex-row items-center justify-center gap-2 p-2 bg-adlergrey-100 rounded">
                <MudText Class="cursor-default text-xs 2xl:text-sm text-adlerdarkblue font-bold break-all">Womit?</MudText>
                <MudTooltip Placement="Placement.Right" Class="w-96 p-4 bg-adlerdarkblue-200 shadow-xl text-start leading-relaxed" Text="Das „Womit“ beschreibt, mit Hilfe welcher theoretischen oder praktischen Werkzeuge Studierende ihre Handlungen ausführen. Hierbei handelt es sich beispielsweise um Formeln, Modelle, Pläne, Begriffe, Tools etc., die im Verlauf der Lehrveranstaltung vermittelt werden und deren Anwendung geübt wird. Die Verwendung und Verknüpfung dieser Werkzeuge stellt die Grundlage für kompetentes Handeln dar. Eine hilfreiche Fragestellung bei der Formulierung ist: „Womit erreichen die Studierenden die Fähigkeit, Fertigkeit oder Kompetenz?“.">
                    <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Info" Class="text-adlergrey hover:text-adlerdarkblue"></MudIcon>
                </MudTooltip>
            </div>
            <MudText Class="cursor-default w-24 flex items-center text-md text-adlergrey-800"> indem sie... </MudText>
            <MudTextField @bind-Value="_currentLearningOutcome.Whereby" Placeholder="Textfeld" Lines="2" DebounceInterval="1" Clearable="true" Immediate="true"></MudTextField>
        </div>

        <div class="flex flex-row gap-4 m-2">
            <div class="min-w-32 sm:w-44 2xl:w-48 flex flex-row items-center justify-center gap-2 p-2 bg-adlergrey-100 rounded">
                <MudText Class="cursor-default text-xs 2xl:text-sm text-adlerdarkblue font-bold break-all">Wozu?</MudText>
                <MudTooltip Placement="Placement.Right" Class="w-96 p-4 bg-adlerdarkblue-200 shadow-xl text-start leading-relaxed" Text="Das „Wozu“ gibt einen Ausblick auf den Sinn und Zweck, für den die Lerneinheit konzipiert wurde. Dabei steht nicht die Prüfung im Fokus. Vielmehr veranschaulicht das „Wozu“ die Handlungsmöglichkeiten der Studierenden, wenn sie das Gelernte sicher beherrschen. Oftmals findet die Handlung oder die Situation des „Wozu“ in einer komplexeren Umgebung und unter schwierigeren Bedingungen als in der Lernsituation statt. Hilfreiche Fragestellungen bei der Formulierung sind: „Für welchen (konkreten und/oder langfristigen) Zweck sollen die Kompetenzen erworben werden?“ und/oder „Wozu benötigen die Studierenden die erworbenen Fähigkeiten, Fertigkeiten oder Kompetenzen nach der Lehrveranstaltung?“.">
                    <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Info" Class="text-adlergrey hover:text-adlerdarkblue"></MudIcon>
                </MudTooltip>
            </div>
            <MudText Class="cursor-default w-24 flex items-center text-md text-adlergrey-800"> um... </MudText>
            <MudTextField @bind-Value="_currentLearningOutcome.WhatFor" Placeholder="Textfeld" Lines="2" DebounceInterval="1" Clearable="true" Immediate="true"></MudTextField>
        </div>
        <MudText Class="p-2 cursor-default flex justify-start text-xs text-adlertextgrey">* Pflichtfeld</MudText>
    </div>
    
    <div class="flex flex-row justify-end items-center mx-4">
        <MudButton Class="mt-1.5" OnClick="ResetInputFields">
            <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Refresh" ></MudIcon>
            <MudText Class="uppercase pl-1 text-sm text-adlergrey-700 font-bold">Eingaben zurücksetzen</MudText>
        </MudButton>
    </div>

    <div class="flex flex-col gap-2 mx-4">
    <MudText Class="cursor-default text-adlergrey-800 text-sm">Vorschau des formulierten Lernziels/Lernergebnisses:</MudText>
    <div class="bg-white border border-adlergrey-300 border-2 rounded px-4 pt-5">
        <MudMarkdown Value="@_currentLearningOutcome.GetMarkDownFormattedOutcome()"></MudMarkdown>
    </div>
</div>

    <div class="flex flex-row justify-between items-center mx-4 mt-1 pb-1">
        <MudButton Class="text-adlerblue font-bold flex-auto justify-start" Disabled="!_currentLearningOutcome.IsCopyable()" StartIcon="@Icons.Material.Filled.ContentCopy" OnClick="@CopyToClickBoard">In die Zwischenablage kopieren</MudButton>
        
        <MudMenu Variant="Variant.Text" 
                 ActivationEvent="MouseEvent.LeftClick" 
                 AnchorOrigin="Origin.TopRight" 
                 TransformOrigin="Origin.TopRight" 
                 PopoverClass="bg-adlerdarkblue"
                 DisableRipple="false"
                 DisableElevation="false">
            <ActivatorContent>
                <MudButton Class="text-xs normal-case w-10 text-adlergrey">Quellen</MudButton>
            </ActivatorContent>
            <ChildContent>
                <div class="w-[32rem] px-4 py-2">
                    <ul class="px-3.5 text-white list-disc">
                        <li class="pb-2">
                            <p class="cursor-default text-xs text-white list-disc">Wunderlich, Antonia; Szczyrba, Birgit (2016): Learning-Outcomes ‚lupenrein‘ formulieren; in: Lehre A-Z, Zentrum für Lehrentwicklung, TH Köln. (Verfügbar unter: <a class="text-xs text-adlerblue" href="https://www.th-koeln.de/mam/downloads/deutsch/hochschule/profil/lehre/steckbrief_learning_outcomes.pdf" target="_blank">https://www.th-koeln.de/mam/downloads/deutsch/hochschule/profil/lehre/steckbrief_learning_outcomes.pdf;</a> Abgerufen am 01.12.2023)</p>
                        </li>
                        <li>
                            <p class="cursor-default text-xs text-white list-disc">Wunderlich, Antonia; Gerber, Julia (2017): Learning-Outcomes fachspezifisch formuliert - vier Beispiele; in: Lehre A-Z, Zentrum für Lehrentwicklung, TH Köln. (Verfügbar unter: <a class="text-xs text-adlerblue" href="https://www.th-koeln.de/mam/downloads/deutsch/hochschule/profil/lehre/learning_outcomes_fachspezifisch_formuliert.pdf" target="_blank">https://www.th-koeln.de/mam/downloads/deutsch/hochschule/profil/lehre/learning_outcomes_fachspezifisch_formuliert.pdf;</a> Abgerufen am 01.12.2023)</p>
                        </li>
                    </ul>
                </div>
            </ChildContent>
        </MudMenu>
    </div>
</div>

@code {
    private LearningOutcome _currentLearningOutcome = new();
    private TaxonomyLevel[] _taxonomyLevels = (TaxonomyLevel[]) Enum.GetValues(typeof(TaxonomyLevel));
    
    private string _selectedTaxonomyLevel = "";

    public class LearningOutcome
    {
        public string What { get; set; } = "";
        public string Whereby { get; set; } = "";
        public string WhatFor { get; set; } = "";
        public string VerbOfVisibility { get; set; } = "";

        public string GetMarkDownFormattedOutcome() =>
            $"Die Studierenden können {FormatWithPlaceholder(What, "[Was?]")} {FormatWithPlaceholder(VerbOfVisibility, "[Verb]")}, \n indem sie {FormatWithPlaceholder(Whereby, "[Womit?]")},\n um {FormatWithPlaceholder(WhatFor, "[Wozu?]")}.";

        public bool IsCopyable() =>
            !IsNullOrEmpty(What) && !IsNullOrEmpty(VerbOfVisibility);

        private bool IsNullOrEmpty(string value) =>
            string.IsNullOrWhiteSpace(value);

        public string GetOutcomeToCopy()
        {
            var sb = new StringBuilder("Die Studierenden können ");
            sb.Append(What).Append(" ").Append(VerbOfVisibility);

            if (!IsNullOrEmpty(Whereby))
            {
                sb.Append(", \n indem sie ").Append(Whereby);
            }

            if (!IsNullOrEmpty(WhatFor))
            {
                sb.Append(",\n um ").Append(WhatFor);
            }

            sb.Append(".");

            return sb.ToString();
        }
    }

    public enum TaxonomyLevel
    {
        Erinnern,
        Verstehen,
        Anwenden,
        Analysieren,
        Beurteilen,
        Erschaffen,
        None
    }
    
    public enum VerbOfVisibility
    {
        abgrenzen, ableiten, abschätzen, abwägen, analysieren, ändern, anführen, angeben, anknüpfen, annehmen, anordnen, anpassen, anwenden, argumentieren, arrangieren, aufbauen, aufdecken, auflisten, auflösen, aufsagen, aufschlüsseln, aufschreiben, aufstellen, aufteilen, aufzählen, aufzeichnen, aufzeigen, ausarbeiten, ausdrücken, ausführen, ausfüllen, ausrechnen, aussagen, äußern, auswählen, auswerten, bearbeiten, bedienen, beeinflussen, begründen, benennen, benoten, benutzen, berechnen, berichten, beschreiben, bestimmen, beurteilen, beweisen, bewerten, bezeichnen, bilden, charakterisieren, darlegen, darstellen, definieren, demonstrieren, designen, deuten, diagnostizieren, differenzieren, diskutieren, durchführen, einordnen, einrichten, einschätzen, einsetzen, einstufen, einteilen, eintragen, entdecken, entnehmen, entscheiden, entwerfen, entwickeln, erarbeiten, erfinden, erheben, erklären, erläutern, ermitteln, erproben, errechnen, erschaffen, erstellen, erweitern, erzählen, erzeugen, evaluieren, extrapolieren, falsifizieren, fertigen, fokussieren, folgern, formatieren, formulieren, gegenüberstellen, generalisieren, generieren, gestalten, gewichten, gliedern, herausstellen, herstellen, hervorbringen, hinterfragen, identifizieren, illustrieren, implementieren, in_Beziehung_setzen, integrieren, interpretieren, isolieren, kategorisieren, kennzeichnen, klassifizieren, kombinieren, konfigurieren, konstruieren, kontrastieren, konzipieren, koordinieren, kreieren, kritisieren, kritisch_vergleichen, lokalisieren, lösen, messen, modifizieren, nachweisen, nennen, nutzen, optimieren, ordnen, organisieren, planen, praktizieren, präparieren, präsentieren, präzisieren, priorisieren, produzieren, prüfen, quantifizieren, realisieren, rechnen, rechtfertigen, relativieren, repräsentieren, reproduzieren, sammeln, schätzen, schildern, schlussfolgern, schreiben, skizzieren, sortieren, strukturieren, subsumieren, synthetisieren, tabellieren, testen, transferieren, trennen, überprüfen, übersetzen, übertragen, überzeugen, umreißen, umschreiben, umsetzen, umwandeln, untergliedern, unterscheiden, unterstützen, untersuchen, unterteilen, urteilen, validieren, verallgemeinern, verändern, veranschaulichen, verbinden, verdeutlichen, vereinfachen, verfassen, vergleichen, verifizieren, verknüpfen, verteidigen, vertreten, vervollständigen, verwenden, verwerfen, voraussagen, vorführen, vorschlagen, wählen, werten, widerlegen, wiedergeben, wiederholen, zeichnen, zeigen, zergliedern, zerlegen, zitieren, zuordnen, zusammenfassen, zusammenfügen, zusammensetzen, zusammenstellen 
    }

    private Dictionary<TaxonomyLevel, List<VerbOfVisibility>> _verbsByTaxonomyLevel = new()
    {
        { TaxonomyLevel.Erinnern, new List<VerbOfVisibility>() { VerbOfVisibility.anführen, VerbOfVisibility.angeben, VerbOfVisibility.auflisten, VerbOfVisibility.aufsagen, VerbOfVisibility.aufschreiben, VerbOfVisibility.aufzählen, VerbOfVisibility.aufzeichnen, VerbOfVisibility.ausdrücken, VerbOfVisibility.ausführen, VerbOfVisibility.aussagen, VerbOfVisibility.benennen, VerbOfVisibility.berichten, VerbOfVisibility.bezeichnen, VerbOfVisibility.darstellen, VerbOfVisibility.definieren, VerbOfVisibility.erzählen, VerbOfVisibility.gliedern, VerbOfVisibility.identifizieren, VerbOfVisibility.kennzeichnen, VerbOfVisibility.nennen, VerbOfVisibility.präsentieren, VerbOfVisibility.reproduzieren, VerbOfVisibility.schildern, VerbOfVisibility.schreiben, VerbOfVisibility.skizzieren, VerbOfVisibility.umreißen, VerbOfVisibility.vervollständigen, VerbOfVisibility.wiedergeben, VerbOfVisibility.wiederholen, VerbOfVisibility.zeichnen, VerbOfVisibility.zeigen, VerbOfVisibility.zitieren, VerbOfVisibility.zuordnen, VerbOfVisibility.zusammenstellen } },
        { TaxonomyLevel.Verstehen, new List<VerbOfVisibility>() { VerbOfVisibility.abgrenzen, VerbOfVisibility.ableiten, VerbOfVisibility.anordnen, VerbOfVisibility.ausdrücken, VerbOfVisibility.auswählen, VerbOfVisibility.begründen, VerbOfVisibility.beschreiben, VerbOfVisibility.bestimmen, VerbOfVisibility.charakterisieren, VerbOfVisibility.darlegen, VerbOfVisibility.darstellen, VerbOfVisibility.definieren, VerbOfVisibility.deuten, VerbOfVisibility.diskutieren, VerbOfVisibility.einordnen, VerbOfVisibility.erklären, VerbOfVisibility.erläutern, VerbOfVisibility.extrapolieren, VerbOfVisibility.folgern, VerbOfVisibility.formulieren, VerbOfVisibility.generalisieren, VerbOfVisibility.herausstellen, VerbOfVisibility.identifizieren, VerbOfVisibility.interpretieren, VerbOfVisibility.klassifizieren, VerbOfVisibility.kontrastieren, VerbOfVisibility.lokalisieren, VerbOfVisibility.ordnen, VerbOfVisibility.präzisieren, VerbOfVisibility.repräsentieren, VerbOfVisibility.schätzen, VerbOfVisibility.schildern, VerbOfVisibility.skizzieren, VerbOfVisibility.subsumieren, VerbOfVisibility.übersetzen, VerbOfVisibility.übertragen, VerbOfVisibility.umschreiben, VerbOfVisibility.untergliedern, VerbOfVisibility.unterscheiden, VerbOfVisibility.verallgemeinern, VerbOfVisibility.veranschaulichen, VerbOfVisibility.verdeutlichen, VerbOfVisibility.vergleichen, VerbOfVisibility.wiedergeben, VerbOfVisibility.zuordnen, VerbOfVisibility.zusammenfassen } },
        { TaxonomyLevel.Anwenden, new List<VerbOfVisibility>() { VerbOfVisibility.abschätzen, VerbOfVisibility.ändern, VerbOfVisibility.anknüpfen, VerbOfVisibility.anpassen, VerbOfVisibility.anwenden, VerbOfVisibility.aufstellen, VerbOfVisibility.aufzeigen, VerbOfVisibility.ausführen, VerbOfVisibility.ausfüllen, VerbOfVisibility.ausrechnen, VerbOfVisibility.auswählen, VerbOfVisibility.bearbeiten, VerbOfVisibility.bedienen, VerbOfVisibility.beeinflussen, VerbOfVisibility.begründen, VerbOfVisibility.benutzen, VerbOfVisibility.berechnen, VerbOfVisibility.bestimmen, VerbOfVisibility.beweisen, VerbOfVisibility.darstellen, VerbOfVisibility.demonstrieren, VerbOfVisibility.durchführen, VerbOfVisibility.einordnen, VerbOfVisibility.einrichten, VerbOfVisibility.einsetzen, VerbOfVisibility.eintragen, VerbOfVisibility.entdecken, VerbOfVisibility.entwickeln, VerbOfVisibility.erarbeiten, VerbOfVisibility.ermitteln, VerbOfVisibility.erproben, VerbOfVisibility.errechnen, VerbOfVisibility.erstellen, VerbOfVisibility.fertigen, VerbOfVisibility.formatieren, VerbOfVisibility.formulieren, VerbOfVisibility.gestalten, VerbOfVisibility.herstellen, VerbOfVisibility.illustrieren, VerbOfVisibility.implementieren, VerbOfVisibility.interpretieren, VerbOfVisibility.konfigurieren, VerbOfVisibility.lösen, VerbOfVisibility.modifizieren, VerbOfVisibility.nutzen, VerbOfVisibility.organisieren, VerbOfVisibility.planen, VerbOfVisibility.praktizieren, VerbOfVisibility.quantifizieren, VerbOfVisibility.realisieren, VerbOfVisibility.rechnen, VerbOfVisibility.transferieren, VerbOfVisibility.übersetzen, VerbOfVisibility.umschreiben, VerbOfVisibility.umsetzen, VerbOfVisibility.unterscheiden, VerbOfVisibility.untersuchen, VerbOfVisibility.veranschaulichen, VerbOfVisibility.verdeutlichen, VerbOfVisibility.verifizieren, VerbOfVisibility.verwenden, VerbOfVisibility.vervollständigen, VerbOfVisibility.vorführen, VerbOfVisibility.wählen, VerbOfVisibility.zeigen } },
        { TaxonomyLevel.Analysieren, new List<VerbOfVisibility>() { VerbOfVisibility.abgrenzen, VerbOfVisibility.ableiten, VerbOfVisibility.abschätzen, VerbOfVisibility.analysieren, VerbOfVisibility.aufdecken, VerbOfVisibility.auflösen, VerbOfVisibility.aufschlüsseln, VerbOfVisibility.aufteilen, VerbOfVisibility.aufzeigen, VerbOfVisibility.auswählen, VerbOfVisibility.auswerten, VerbOfVisibility.bestimmen, VerbOfVisibility.beschreiben, VerbOfVisibility.darlegen, VerbOfVisibility.darstellen, VerbOfVisibility.diagnostizieren, VerbOfVisibility.differenzieren, VerbOfVisibility.einordnen, VerbOfVisibility.einschätzen, VerbOfVisibility.einteilen, VerbOfVisibility.entnehmen, VerbOfVisibility.ermitteln, VerbOfVisibility.fokussieren, VerbOfVisibility.folgern, VerbOfVisibility.gegenüberstellen, VerbOfVisibility.gliedern, VerbOfVisibility.herausstellen, VerbOfVisibility.identifizieren, VerbOfVisibility.integrieren, VerbOfVisibility.isolieren, VerbOfVisibility.kategorisieren, VerbOfVisibility.klassifizieren, VerbOfVisibility.kontrastieren, VerbOfVisibility.kritisieren, VerbOfVisibility.lösen, VerbOfVisibility.nachweisen, VerbOfVisibility.organisieren, VerbOfVisibility.prüfen, VerbOfVisibility.rechtfertigen, VerbOfVisibility.schlussfolgern, VerbOfVisibility.sortieren, VerbOfVisibility.strukturieren, VerbOfVisibility.testen, VerbOfVisibility.trennen, VerbOfVisibility.umreißen, VerbOfVisibility.umwandeln, VerbOfVisibility.unterscheiden, VerbOfVisibility.untersuchen, VerbOfVisibility.unterteilen, VerbOfVisibility.vergleichen, VerbOfVisibility.verknüpfen, VerbOfVisibility.voraussagen, VerbOfVisibility.zergliedern, VerbOfVisibility.zerlegen, VerbOfVisibility.zuordnen } },
        { TaxonomyLevel.Beurteilen, new List<VerbOfVisibility>() { VerbOfVisibility.abwägen, VerbOfVisibility.abschätzen, VerbOfVisibility.annehmen, VerbOfVisibility.argumentieren, VerbOfVisibility.äußern, VerbOfVisibility.auswählen, VerbOfVisibility.auswerten, VerbOfVisibility.begründen, VerbOfVisibility.benoten, VerbOfVisibility.bestimmen, VerbOfVisibility.beurteilen, VerbOfVisibility.bewerten, VerbOfVisibility.differenzieren, VerbOfVisibility.diskutieren, VerbOfVisibility.einschätzen, VerbOfVisibility.einstufen, VerbOfVisibility.entscheiden, VerbOfVisibility.erheben, VerbOfVisibility.evaluieren, VerbOfVisibility.falsifizieren, VerbOfVisibility.folgern, VerbOfVisibility.gegenüberstellen, VerbOfVisibility.gewichten, VerbOfVisibility.hinterfragen, VerbOfVisibility.in_Beziehung_setzen, VerbOfVisibility.interpretieren, VerbOfVisibility.klassifizieren, VerbOfVisibility.kritisch_vergleichen, VerbOfVisibility.kritisieren, VerbOfVisibility.messen, VerbOfVisibility.ordnen, VerbOfVisibility.planen, VerbOfVisibility.priorisieren, VerbOfVisibility.prüfen, VerbOfVisibility.rechtfertigen, VerbOfVisibility.relativieren, VerbOfVisibility.schätzen, VerbOfVisibility.sortieren, VerbOfVisibility.strukturieren, VerbOfVisibility.synthetisieren, VerbOfVisibility.testen, VerbOfVisibility.überprüfen, VerbOfVisibility.überzeugen, VerbOfVisibility.urteilen, VerbOfVisibility.validieren, VerbOfVisibility.vereinfachen, VerbOfVisibility.vergleichen, VerbOfVisibility.verifizieren, VerbOfVisibility.vertreten, VerbOfVisibility.verteidigen, VerbOfVisibility.verwerfen, VerbOfVisibility.voraussagen, VerbOfVisibility.vorschlagen, VerbOfVisibility.wählen, VerbOfVisibility.werten, VerbOfVisibility.widerlegen } },
        { TaxonomyLevel.Erschaffen, new List<VerbOfVisibility>() { VerbOfVisibility.ableiten, VerbOfVisibility.anknüpfen, VerbOfVisibility.arrangieren, VerbOfVisibility.aufbauen, VerbOfVisibility.aufstellen, VerbOfVisibility.ausarbeiten, VerbOfVisibility.bilden, VerbOfVisibility.definieren, VerbOfVisibility.designen, VerbOfVisibility.diagnostizieren, VerbOfVisibility.entdecken, VerbOfVisibility.entwerfen, VerbOfVisibility.entwickeln, VerbOfVisibility.erarbeiten, VerbOfVisibility.erfinden, VerbOfVisibility.erläutern, VerbOfVisibility.erschaffen, VerbOfVisibility.erstellen, VerbOfVisibility.erweitern, VerbOfVisibility.erzeugen, VerbOfVisibility.generieren, VerbOfVisibility.gestalten, VerbOfVisibility.hervorbringen, VerbOfVisibility.integrieren, VerbOfVisibility.kombinieren, VerbOfVisibility.konstruieren, VerbOfVisibility.konzipieren, VerbOfVisibility.koordinieren, VerbOfVisibility.kreieren, VerbOfVisibility.lösen, VerbOfVisibility.modifizieren, VerbOfVisibility.optimieren, VerbOfVisibility.ordnen, VerbOfVisibility.organisieren, VerbOfVisibility.planen, VerbOfVisibility.präparieren, VerbOfVisibility.produzieren, VerbOfVisibility.sammeln, VerbOfVisibility.schlussfolgern, VerbOfVisibility.schreiben, VerbOfVisibility.tabellieren, VerbOfVisibility.unterstützen, VerbOfVisibility.verändern, VerbOfVisibility.verbinden, VerbOfVisibility.verfassen, VerbOfVisibility.verteidigen, VerbOfVisibility.zuordnen, VerbOfVisibility.zusammenfassen, VerbOfVisibility.zusammenfügen, VerbOfVisibility.zusammensetzen, VerbOfVisibility.zusammenstellen } },
        { TaxonomyLevel.None, new List<VerbOfVisibility>(Enum.GetValues(typeof(VerbOfVisibility)).Cast<VerbOfVisibility>())}
    };
    
    private async Task<IEnumerable<string>> SearchVerbOfVisibility(string value)
    {
        var results = new List<string>();

        if (Enum.TryParse<TaxonomyLevel>(_selectedTaxonomyLevel, out var parsedValue))
        {
            results.AddRange(_verbsByTaxonomyLevel[parsedValue]
                .Where(verb => verb.ToString().Contains(value, StringComparison.InvariantCultureIgnoreCase))
                .Select(verb => verb.ToString().Replace("_", " ")));
        }
        
        if(_selectedTaxonomyLevel == "")
        {
            results.AddRange(_verbsByTaxonomyLevel[TaxonomyLevel.None]
                .Where(verb => verb.ToString().Contains(value, StringComparison.InvariantCultureIgnoreCase))
                .Select(verb => verb.ToString().Replace("_", " ")));
        }

        if (!string.IsNullOrEmpty(value) && !results.Contains(value))
        {
            results.Insert(0, value);
        }

        return await Task.FromResult(results);
    }

    private string _currentText = "";
    private void OnBlurVerbOfVisibility()
    {
        _currentLearningOutcome.VerbOfVisibility = _currentText;
    }
    
    private static string FormatWithPlaceholder(string value, string placeholder = "[ ... ]")
    {
        return string.IsNullOrWhiteSpace(value) ? $"*{placeholder}*" : $"**{value.Trim()}**";
    }

    private async void CopyToClickBoard()
    {
        try
        {
            await ClipBoardService.SetTextAsync(_currentLearningOutcome.GetOutcomeToCopy());
            Snackbar.Add("Ihr formuliertes Lernziel/Lernergebnis wurde erfolgreich in die Zwischenablage kopiert.", Severity.Success);
        }
        catch
        {
            // ignored
            Snackbar.Add("Fehler beim Kopieren in die Zwischenablage. Markieren und kopieren Sie alternativ Ihr formuliertes Lernziel/Lernergebnis im Vorschaufenster.", Severity.Error);
        }
    }
    
    private void ResetInputFields()
    {
        _currentLearningOutcome = new LearningOutcome();
        _currentText = "";
        _selectedTaxonomyLevel = "";
    }

}